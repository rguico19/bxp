/* Author: Ruben  
   Trigger Name: Update Rate Adjustment Field
   Purpose: Computes Adjustment Rate to the Room Reservation
   Multiple Rate Adjustment Item currently can be linked to the reservation
*/

function getAdjustmentRate() {
	var rateAdjustment = rbv_api.getRelatedIds("R284427", Number("{!id}"));
	var overRideIndex = 0;
	var cacheIndex = 0;
	var finalResult = ( Number("{!new_room_rate}") > 0 ? Number("{!new_room_rate}") : Number("{!R284236.rack_rate}") );
	var totalResult = 0;
	var objName = "discount_item";
	if(rateAdjustment.length > 0) {
		for (var i = 0; i < rateAdjustment.length; i++) {
			var discCode = rbv_api.getFieldValue(objName, rateAdjustment[i], "disc_code");
			var overRide = Number(rbv_api.getFieldValue(objName, rateAdjustment[i], "override_room_rate_amount"));
			var newRate = Number(rbv_api.getFieldValue(objName, rateAdjustment[i], "new_room_rate"));
			var discMode = rbv_api.getFieldValue(objName, rateAdjustment[i], "disc_mode");
			var discPercent = Number(rbv_api.getFieldValue(objName, rateAdjustment[i], "percentage"));
			var discAmount = Number(rbv_api.getFieldValue(objName, rateAdjustment[i], "amount"));
			//computes discount in percentage
			if ( discPercent > 0 && isNaN(discPercent) == false) {
				finalResult = finalResult - (finalResult * ( discPercent / 100 ));
				rbv_api.println("result at percentage: "+finalResult);
			}
			else {
				rbv_api.println("fixed");
				//computes amount of the new implemented room rate
				if ( newRate > 0 && isNaN(newRate) == false) { finalResult = newRate; }
				//computes amount of discount in a fixed amount
				else if(discAmount > 0 && isNaN(newRate) == false) { finalResult = finalResult - discAmount; rbv_api.println("result at fixed amt: "+finalResult);}
				
			}
			
		}
		totalResult = finalResult * Number("{!nights}");
		if(isNaN(totalResult)) totalResult = 0;
	}
	
	return totalResult;
}getAdjustmentRate();
